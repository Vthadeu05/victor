import streamlit as st
import PyPDF2
import spacy
import re

# --- Carregar o modelo spaCy para processamento de linguagem ---
# Preferimos o modelo em portugu√™s, mas temos um fallback para ingl√™s.
try:
    nlp = spacy.load("pt_core_news_sm")
except OSError:
    st.warning("Modelo spaCy para portugu√™s n√£o encontrado. Tentando carregar modelo em ingl√™s.")
    try:
        nlp = spacy.load("en_core_web_sm")
    except OSError:
        st.error("Nenhum modelo spaCy encontrado. Por favor, execute 'python -m spacy download pt_core_news_sm' ou 'en_core_web_sm' no seu terminal.")
        st.stop() # Interrompe a execu√ß√£o se nenhum modelo puder ser carregado


# --- Configura√ß√µes da P√°gina do Streamlit ---
st.set_page_config(
    page_title="Analisador Inteligente de Laudos",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Fun√ß√£o para extrair texto de PDF ---
@st.cache_data # Cache para n√£o reprocessar o mesmo PDF
def extract_text_from_pdf(pdf_file):
    """Extrai texto de um arquivo PDF carregado."""
    text = ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        for page in pdf_reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n" # Adiciona quebra de linha entre p√°ginas
    except Exception as e:
        st.error(f"Erro ao extrair texto do PDF: {e}. Verifique se o PDF est√° leg√≠vel.")
        return ""
    return text

# --- Fun√ß√£o para processar o texto e extrair informa√ß√µes ---
def process_medical_text(text):
    """
    Processa o texto extra√≠do do PDF para identificar informa√ß√µes m√©dicas chave.
    A l√≥gica √© baseada em padr√µes de texto e palavras-chave.
    """
    extracted_info = {
        "Palavras-chave de Reconhecimento": set(), # Usamos set para garantir unicidade
        "Diagn√≥stico Poss√≠vel": "N√£o identificado claramente",
        "Exames Padr√£o Ouro": set(),
        "Exames Complementares": set(),
        "Tratamento Sugerido": "N√£o identificado claramente",
        "Diagn√≥stico Diferencial": set()
    }

    doc = nlp(text.lower()) # Processa o texto em min√∫sculas para facilitar a correspond√™ncia

    # --- 1. Palavras-chave de Reconhecimento ---
    # Termos comuns em laudos que indicam achados ou queixas.
    keywords_recognition_list = [
        "sintoma", "sintomas", "achado", "achados", "cl√≠nico", "cl√≠nica",
        "hist√≥ria", "quadro", "paciente", "queixa", "queixas", "dor", "febre",
        "inflama√ß√£o", "infec√ß√£o", "altera√ß√£o", "les√£o", "presen√ßa de", "evid√™ncia de",
        "exame f√≠sico", "anamnese", "resultado de"
    ]
    for keyword in keywords_recognition_list:
        if re.search(r'\b' + re.escape(keyword) + r'\b', text, re.IGNORECASE):
            extracted_info["Palavras-chave de Reconhecimento"].add(keyword)


    # --- 2. Diagn√≥stico Poss√≠vel ---
    # Tentativa de capturar o diagn√≥stico principal.
    # Padr√µes comuns: "diagn√≥stico de", "compat√≠vel com", "sugestivo de", "hip√≥tese diagn√≥stica"
    match_diag = re.search(r'(?:diagn√≥stico de|compat√≠vel com|sugestivo de|hip√≥tese diagn√≥stica)[:\s]*([\w\s,-]+?)(?:\.|\n|e\s|\bpara\b|em\s|\bcom\b|\bsem\b|$)', text, re.IGNORECASE)
    if match_diag:
        # Pega o grupo capturado e limpa espa√ßos extras
        diagnosis = match_diag.group(1).strip()
        # Remove caracteres indesejados no final
        diagnosis = re.sub(r'[,.;:\s]+$', '', diagnosis)
        # Limita o tamanho da string do diagn√≥stico para evitar capturas muito longas
        if len(diagnosis) > 100:
            diagnosis = diagnosis[:100] + "..."
        extracted_info["Diagn√≥stico Poss√≠vel"] = diagnosis.capitalize()
    else:
        # Fallback: tentar identificar entidades m√©dicas gerais se o padr√£o n√£o for encontrado
        # Isso √© limitado, mas pode pegar nomes de doen√ßas se o modelo do spaCy as reconhecer.
        # Estamos procurando por "entidades nomeadas" que podem ser doen√ßas ou problemas.
        potential_diagnoses = [ent.text for ent in doc.ents if ent.label_ in ["DISEASE", "MEDICAL_CONDITION", "SYMPTOM", "ORG"]]
        if potential_diagnoses:
            # Pega os 2-3 primeiros termos mais prov√°veis ou frequentes como um diagn√≥stico poss√≠vel
            # Poder√≠amos adicionar contagem de frequ√™ncia aqui para maior relev√¢ncia
            extracted_info["Diagn√≥stico Poss√≠vel"] = ", ".join(list(set(potential_diagnoses[:3]))).capitalize()


    # --- 3. Exames Padr√£o Ouro e 4. Exames Complementares ---
    # Uma lista mais abrangente de termos de exames.
    exam_keywords_list = [
        "resson√¢ncia magn√©tica", "tomografia computadorizada", "raio-x", "ultrassonografia",
        "exame de sangue", "hemograma", "urina", "cultura", "bi√≥psia", "endoscopia",
        "colonoscopia", "eletrocardiograma", "teste ergom√©trico", "sorologia", "PCR",
        "anatomopatol√≥gico", "imunohistoqu√≠mica", "cultura de urina", "teste de glicemia",
        "colesterol", "triglicer√≠deos", "creatinina", "ureia", "ecocardiograma",
        "teste de fun√ß√£o pulmonar", "espirometria", "tomografia por emiss√£o de p√≥sitrons", "PET-CT"
    ]

    for exam in exam_keywords_list:
        # Verifica se o exame √© mencionado no texto
        if re.search(r'\b' + re.escape(exam) + r'\b', text, re.IGNORECASE):
            # Tenta inferir "padr√£o ouro" se a frase estiver pr√≥xima
            # Esta √© uma heuristicia e pode n√£o ser 100% precisa.
            context_around_exam = text[max(0, text.lower().find(exam.lower()) - 50):min(len(text), text.lower().find(exam.lower()) + len(exam) + 50)]
            if re.search(r'padr√£o ouro|gold standard', context_around_exam, re.IGNORECASE):
                extracted_info["Exames Padr√£o Ouro"].add(exam.capitalize())
            else:
                extracted_info["Exames Complementares"].add(exam.capitalize())


    # --- 5. Tratamento Sugerido ---
    # Termos comuns que indicam tratamento.
    treatment_keywords_list = [
        "tratamento", "terapia", "medica√ß√£o", "medicamento", "cirurgia", "interven√ß√£o",
        "aconselhamento", "reabilita√ß√£o", "dose", "prescri√ß√£o", "conduta", "indicado",
        "administrar", "uso de", "cir√∫rgico", "farmacol√≥gico", "fisioterapia", "quimioterapia",
        "radioterapia", "dieta", "repouso"
    ]
    found_treatments = []
    # Procurar senten√ßas que contenham termos de tratamento e tentar extrair a senten√ßa completa
    for sent in doc.sents:
        if any(re.search(r'\b' + re.escape(keyword) + r'\b', sent.text, re.IGNORECASE) for keyword in treatment_keywords_list):
            found_treatments.append(sent.text.strip())
            if len(found_treatments) >= 2: # Pegar no m√°ximo 2 senten√ßas como exemplo
                break
    if found_treatments:
        extracted_info["Tratamento Sugerido"] = " ".join(found_treatments).capitalize()
    else:
        # Fallback: tentar encontrar termos de tratamento isolados
        for keyword in treatment_keywords_list:
            if re.search(r'\b' + re.escape(keyword) + r'\b', text, re.IGNORECASE):
                extracted_info["Tratamento Sugerido"] = keyword.capitalize() + " (mencionado)"
                break # Pega o primeiro encontrado


    # --- 6. Diagn√≥stico Diferencial ---
    # Termos que indicam outras condi√ß√µes a serem consideradas.
    differential_keywords_list = ["diagn√≥stico diferencial", "DD", "descartar", "excluir", "considerar a possibilidade de"]
    found_diff_diag = []
    for keyword in differential_keywords_list:
        if re.search(r'\b' + re.escape(keyword) + r'\b', text, re.IGNORECASE):
            # Tenta capturar a frase ap√≥s a palavra-chave do DD
            match_dd = re.search(r'(' + re.escape(keyword) + r'[:\s]*(.*?)(?:\.|\n|e\s|\bcom\b|$))', text, re.IGNORECASE)
            if match_dd:
                diff_diag = match_dd.group(2).strip()
                diff_diag = re.sub(r'[,.;:\s]+$', '', diff_diag)
                if len(diff_diag) > 100:
                    diff_diag = diff_diag[:100] + "..."
                found_diff_diag.append(diff_diag.capitalize())
            else:
                # Se n√£o encontrar um padr√£o espec√≠fico, adiciona a pr√≥pria palavra-chave
                found_diff_diag.append(keyword.capitalize())

    if found_diff_diag:
        extracted_info["Diagn√≥stico Diferencial"] = set(found_diff_diag)
    else:
        extracted_info["Diagn√≥stico Diferencial"].add("N√£o identificado claramente (requer an√°lise manual)")


    # Converter sets para listas para exibi√ß√£o
    extracted_info["Palavras-chave de Reconhecimento"] = list(extracted_info["Palavras-chave de Reconhecimento"])
    extracted_info["Exames Padr√£o Ouro"] = list(extracted_info["Exames Padr√£o Ouro"])
    extracted_info["Exames Complementares"] = list(extracted_info["Exames Complementares"])
    extracted_info["Diagn√≥stico Diferencial"] = list(extracted_info["Diagn√≥stico Diferencial"])

    return extracted_info

# --- T√≠tulo e Descri√ß√£o da Interface ---
st.title("üìÑ Analisador Inteligente de Laudos M√©dicos")
st.markdown("""
    Este aplicativo ajuda a extrair e organizar informa√ß√µes chave de documentos PDF,
    como poss√≠veis diagn√≥sticos, exames e tratamentos.
    **Importante:** Esta ferramenta √© um **aux√≠lio** para an√°lise textual e **n√£o substitui**
    a avalia√ß√£o e o diagn√≥stico de um profissional de sa√∫de qualificado.
""")

st.markdown("---")

# --- Se√ß√£o de Upload de Arquivo ---
st.subheader("1. Carregue seu Laudo em PDF")
uploaded_file = st.file_uploader("Arraste e solte ou clique para escolher um arquivo PDF", type="pdf")

pdf_text = ""
if uploaded_file is not None:
    st.success("‚úÖ Arquivo PDF carregado com sucesso!")
    with st.spinner("Extraindo texto do PDF..."):
        pdf_text = extract_text_from_pdf(uploaded_file)

    if pdf_text:
        st.expander("Pr√©via do Texto Extra√≠do (clique para expandir)").text(pdf_text[:2000] + "..." if len(pdf_text) > 2000 else pdf_text)
        st.markdown("---")
        st.subheader("2. Analisar Laudo")
        if st.button("üöÄ Iniciar An√°lise"):
            with st.spinner("Analisando o texto do laudo..."):
                analysis_results = process_medical_text(pdf_text)

            st.markdown("---")
            st.subheader("3. Resultados da An√°lise")

            # --- Exibi√ß√£o dos Resultados ---
            st.markdown("### üîç Palavras-chave de Reconhecimento")
            if analysis_results["Palavras-chave de Reconhecimento"]:
                st.info(", ".join(analysis_results["Palavras-chave de Reconhecimento"]))
            else:
                st.info("Nenhuma palavra-chave de reconhecimento espec√≠fica encontrada.")

            st.markdown("### üí° Diagn√≥stico Poss√≠vel")
            st.success(analysis_results["Diagn√≥stico Poss√≠vel"])

            col1, col2 = st.columns(2)
            with col1:
                st.markdown("### ‚úÖ Exames Padr√£o Ouro")
                if analysis_results["Exames Padr√£o Ouro"]:
                    st.write(", ".join(analysis_results["Exames Padr√£o Ouro"]))
                else:
                    st.write("Nenhum exame padr√£o ouro identificado.")
            with col2:
                st.markdown("### ‚ûï Exames Complementares")
                if analysis_results["Exames Complementares"]:
                    st.write(", ".join(analysis_results["Exames Complementares"]))
                else:
                    st.write("Nenhum exame complementar identificado.")

            st.markdown("### üíä Tratamento Sugerido")
            st.warning(analysis_results["Tratamento Sugerido"])

            st.markdown("### ‚ÜîÔ∏è Diagn√≥stico Diferencial")
            if analysis_results["Diagn√≥stico Diferencial"]:
                st.error(", ".join(analysis_results["Diagn√≥stico Diferencial"]))
            else:
                st.error("Nenhum diagn√≥stico diferencial identificado claramente.")

            st.markdown("---")
            st.info("Lembre-se: Este √© um prot√≥tipo! A precis√£o depende muito da clareza do documento e da complexidade da terminologia.")
        else:
            st.info("Clique no bot√£o 'Iniciar An√°lise' para processar o laudo.")
    else:
        st.error("N√£o foi poss√≠vel extrair texto do PDF. Por favor, tente com outro arquivo ou verifique se o PDF n√£o √© uma imagem.")
else:
    st.info("Aguardando o carregamento de um arquivo PDF...")